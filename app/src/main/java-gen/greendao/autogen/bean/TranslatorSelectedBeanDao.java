package greendao.autogen.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzligo.ebizzcardstranslator.persistence.TranslatorSelectedBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSLATOR_SELECTED_BEAN".
*/
public class TranslatorSelectedBeanDao extends AbstractDao<TranslatorSelectedBean, Long> {

    public static final String TABLENAME = "TRANSLATOR_SELECTED_BEAN";

    /**
     * Properties of entity TranslatorSelectedBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property FromName = new Property(2, String.class, "fromName", false, "FROM_NAME");
        public final static Property FromUserId = new Property(3, String.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property FromLangId = new Property(4, Integer.class, "fromLangId", false, "FROM_LANG_ID");
        public final static Property FromPortraitId = new Property(5, String.class, "fromPortraitId", false, "FROM_PORTRAIT_ID");
        public final static Property ToName = new Property(6, String.class, "toName", false, "TO_NAME");
        public final static Property ToUserId = new Property(7, String.class, "toUserId", false, "TO_USER_ID");
        public final static Property ToLangId = new Property(8, Integer.class, "toLangId", false, "TO_LANG_ID");
        public final static Property ToPortraitId = new Property(9, String.class, "toPortraitId", false, "TO_PORTRAIT_ID");
        public final static Property TranslatorMsg = new Property(10, String.class, "translatorMsg", false, "TRANSLATOR_MSG");
        public final static Property Reason = new Property(11, String.class, "reason", false, "REASON");
        public final static Property EndTime = new Property(12, Long.class, "endTime", false, "END_TIME");
        public final static Property Status = new Property(13, Integer.class, "status", false, "STATUS");
        public final static Property UnTransMsg = new Property(14, Integer.class, "unTransMsg", false, "UN_TRANS_MSG");
        public final static Property IsTranslating = new Property(15, Boolean.class, "isTranslating", false, "IS_TRANSLATING");
        public final static Property NotifyTime = new Property(16, Long.class, "notifyTime", false, "NOTIFY_TIME");
        public final static Property UpdateTime = new Property(17, Long.class, "updateTime", false, "UPDATE_TIME");
    }


    public TranslatorSelectedBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TranslatorSelectedBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSLATOR_SELECTED_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_ID\" TEXT," + // 1: sessionId
                "\"FROM_NAME\" TEXT," + // 2: fromName
                "\"FROM_USER_ID\" TEXT NOT NULL ," + // 3: fromUserId
                "\"FROM_LANG_ID\" INTEGER," + // 4: fromLangId
                "\"FROM_PORTRAIT_ID\" TEXT," + // 5: fromPortraitId
                "\"TO_NAME\" TEXT," + // 6: toName
                "\"TO_USER_ID\" TEXT NOT NULL ," + // 7: toUserId
                "\"TO_LANG_ID\" INTEGER," + // 8: toLangId
                "\"TO_PORTRAIT_ID\" TEXT," + // 9: toPortraitId
                "\"TRANSLATOR_MSG\" TEXT," + // 10: translatorMsg
                "\"REASON\" TEXT," + // 11: reason
                "\"END_TIME\" INTEGER," + // 12: endTime
                "\"STATUS\" INTEGER," + // 13: status
                "\"UN_TRANS_MSG\" INTEGER," + // 14: unTransMsg
                "\"IS_TRANSLATING\" INTEGER," + // 15: isTranslating
                "\"NOTIFY_TIME\" INTEGER," + // 16: notifyTime
                "\"UPDATE_TIME\" INTEGER);"); // 17: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSLATOR_SELECTED_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TranslatorSelectedBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(3, fromName);
        }
        stmt.bindString(4, entity.getFromUserId());
 
        Integer fromLangId = entity.getFromLangId();
        if (fromLangId != null) {
            stmt.bindLong(5, fromLangId);
        }
 
        String fromPortraitId = entity.getFromPortraitId();
        if (fromPortraitId != null) {
            stmt.bindString(6, fromPortraitId);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(7, toName);
        }
        stmt.bindString(8, entity.getToUserId());
 
        Integer toLangId = entity.getToLangId();
        if (toLangId != null) {
            stmt.bindLong(9, toLangId);
        }
 
        String toPortraitId = entity.getToPortraitId();
        if (toPortraitId != null) {
            stmt.bindString(10, toPortraitId);
        }
 
        String translatorMsg = entity.getTranslatorMsg();
        if (translatorMsg != null) {
            stmt.bindString(11, translatorMsg);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(12, reason);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(13, endTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
 
        Integer unTransMsg = entity.getUnTransMsg();
        if (unTransMsg != null) {
            stmt.bindLong(15, unTransMsg);
        }
 
        Boolean isTranslating = entity.getIsTranslating();
        if (isTranslating != null) {
            stmt.bindLong(16, isTranslating ? 1L: 0L);
        }
 
        Long notifyTime = entity.getNotifyTime();
        if (notifyTime != null) {
            stmt.bindLong(17, notifyTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(18, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TranslatorSelectedBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(3, fromName);
        }
        stmt.bindString(4, entity.getFromUserId());
 
        Integer fromLangId = entity.getFromLangId();
        if (fromLangId != null) {
            stmt.bindLong(5, fromLangId);
        }
 
        String fromPortraitId = entity.getFromPortraitId();
        if (fromPortraitId != null) {
            stmt.bindString(6, fromPortraitId);
        }
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(7, toName);
        }
        stmt.bindString(8, entity.getToUserId());
 
        Integer toLangId = entity.getToLangId();
        if (toLangId != null) {
            stmt.bindLong(9, toLangId);
        }
 
        String toPortraitId = entity.getToPortraitId();
        if (toPortraitId != null) {
            stmt.bindString(10, toPortraitId);
        }
 
        String translatorMsg = entity.getTranslatorMsg();
        if (translatorMsg != null) {
            stmt.bindString(11, translatorMsg);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(12, reason);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(13, endTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
 
        Integer unTransMsg = entity.getUnTransMsg();
        if (unTransMsg != null) {
            stmt.bindLong(15, unTransMsg);
        }
 
        Boolean isTranslating = entity.getIsTranslating();
        if (isTranslating != null) {
            stmt.bindLong(16, isTranslating ? 1L: 0L);
        }
 
        Long notifyTime = entity.getNotifyTime();
        if (notifyTime != null) {
            stmt.bindLong(17, notifyTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(18, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TranslatorSelectedBean readEntity(Cursor cursor, int offset) {
        TranslatorSelectedBean entity = new TranslatorSelectedBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromName
            cursor.getString(offset + 3), // fromUserId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // fromLangId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromPortraitId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // toName
            cursor.getString(offset + 7), // toUserId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // toLangId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // toPortraitId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // translatorMsg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // reason
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // endTime
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // unTransMsg
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isTranslating
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // notifyTime
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TranslatorSelectedBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFromUserId(cursor.getString(offset + 3));
        entity.setFromLangId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFromPortraitId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToUserId(cursor.getString(offset + 7));
        entity.setToLangId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setToPortraitId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTranslatorMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReason(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEndTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setUnTransMsg(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsTranslating(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setNotifyTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setUpdateTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TranslatorSelectedBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TranslatorSelectedBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TranslatorSelectedBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
