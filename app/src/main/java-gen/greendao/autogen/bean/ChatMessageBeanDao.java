package greendao.autogen.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzligo.ebizzcardstranslator.persistence.ChatMessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_BEAN".
*/
public class ChatMessageBeanDao extends AbstractDao<ChatMessageBean, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_BEAN";

    /**
     * Properties of entity ChatMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property TranslateContent = new Property(3, String.class, "translateContent", false, "TRANSLATE_CONTENT");
        public final static Property FromName = new Property(4, String.class, "fromName", false, "FROM_NAME");
        public final static Property FromId = new Property(5, String.class, "fromId", false, "FROM_ID");
        public final static Property MsgTime = new Property(6, String.class, "msgTime", false, "MSG_TIME");
        public final static Property ToId = new Property(7, String.class, "toId", false, "TO_ID");
        public final static Property ToName = new Property(8, String.class, "toName", false, "TO_NAME");
        public final static Property TranslatorId = new Property(9, String.class, "translatorId", false, "TRANSLATOR_ID");
        public final static Property TranslateFileUrl = new Property(10, String.class, "translateFileUrl", false, "TRANSLATE_FILE_URL");
        public final static Property TranslateFilePath = new Property(11, String.class, "translateFilePath", false, "TRANSLATE_FILE_PATH");
        public final static Property TranslateVoiceLong = new Property(12, Integer.class, "translateVoiceLong", false, "TRANSLATE_VOICE_LONG");
        public final static Property FileUrl = new Property(13, String.class, "fileUrl", false, "FILE_URL");
        public final static Property FilePath = new Property(14, String.class, "filePath", false, "FILE_PATH");
        public final static Property VideoThumbnailPath = new Property(15, String.class, "videoThumbnailPath", false, "VIDEO_THUMBNAIL_PATH");
        public final static Property VoiceLong = new Property(16, Integer.class, "voiceLong", false, "VOICE_LONG");
        public final static Property ImageSize = new Property(17, String.class, "imageSize", false, "IMAGE_SIZE");
        public final static Property MsgDescription = new Property(18, String.class, "msgDescription", false, "MSG_DESCRIPTION");
        public final static Property OriginalObjID = new Property(19, String.class, "originalObjID", false, "ORIGINAL_OBJ_ID");
        public final static Property TempStr = new Property(20, String.class, "tempStr", false, "TEMP_STR");
        public final static Property MediumObjID = new Property(21, String.class, "mediumObjID", false, "MEDIUM_OBJ_ID");
        public final static Property ThumbnailObjID = new Property(22, String.class, "thumbnailObjID", false, "THUMBNAIL_OBJ_ID");
        public final static Property HdKey = new Property(23, String.class, "hdKey", false, "HD_KEY");
        public final static Property Response = new Property(24, String.class, "response", false, "RESPONSE");
        public final static Property PrivateToNickname = new Property(25, String.class, "privateToNickname", false, "PRIVATE_TO_NICKNAME");
        public final static Property IsPrivateMessage = new Property(26, Boolean.class, "isPrivateMessage", false, "IS_PRIVATE_MESSAGE");
        public final static Property PrivateMsgFromID = new Property(27, String.class, "privateMsgFromID", false, "PRIVATE_MSG_FROM_ID");
        public final static Property ExtraUid = new Property(28, String.class, "extraUid", false, "EXTRA_UID");
        public final static Property IsPrivateMsgFromMe = new Property(29, Boolean.class, "isPrivateMsgFromMe", false, "IS_PRIVATE_MSG_FROM_ME");
        public final static Property SendMsgType = new Property(30, Integer.class, "sendMsgType", false, "SEND_MSG_TYPE");
        public final static Property IsChoiceTranslate = new Property(31, Boolean.class, "isChoiceTranslate", false, "IS_CHOICE_TRANSLATE");
        public final static Property TranslationStatus = new Property(32, Integer.class, "translationStatus", false, "TRANSLATION_STATUS");
        public final static Property TranslateType = new Property(33, Integer.class, "translateType", false, "TRANSLATE_TYPE");
        public final static Property MsgStatus = new Property(34, Integer.class, "msgStatus", false, "MSG_STATUS");
        public final static Property MsgIsTrans = new Property(35, Boolean.class, "msgIsTrans", false, "MSG_IS_TRANS");
        public final static Property IsReTrans = new Property(36, Boolean.class, "isReTrans", false, "IS_RE_TRANS");
        public final static Property IsReadVoice = new Property(37, Boolean.class, "isReadVoice", false, "IS_READ_VOICE");
        public final static Property Type = new Property(38, Integer.class, "type", false, "TYPE");
        public final static Property TranslateTime = new Property(39, Long.class, "translateTime", false, "TRANSLATE_TIME");
        public final static Property ExtraInfo = new Property(40, String.class, "extraInfo", false, "EXTRA_INFO");
        public final static Property OrderId = new Property(41, String.class, "orderId", false, "ORDER_ID");
    }


    public ChatMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_ID\" TEXT NOT NULL ," + // 1: msgId
                "\"CONTENT\" TEXT," + // 2: content
                "\"TRANSLATE_CONTENT\" TEXT," + // 3: translateContent
                "\"FROM_NAME\" TEXT," + // 4: fromName
                "\"FROM_ID\" TEXT NOT NULL ," + // 5: fromId
                "\"MSG_TIME\" TEXT," + // 6: msgTime
                "\"TO_ID\" TEXT NOT NULL ," + // 7: toId
                "\"TO_NAME\" TEXT," + // 8: toName
                "\"TRANSLATOR_ID\" TEXT NOT NULL ," + // 9: translatorId
                "\"TRANSLATE_FILE_URL\" TEXT," + // 10: translateFileUrl
                "\"TRANSLATE_FILE_PATH\" TEXT," + // 11: translateFilePath
                "\"TRANSLATE_VOICE_LONG\" INTEGER," + // 12: translateVoiceLong
                "\"FILE_URL\" TEXT," + // 13: fileUrl
                "\"FILE_PATH\" TEXT," + // 14: filePath
                "\"VIDEO_THUMBNAIL_PATH\" TEXT," + // 15: videoThumbnailPath
                "\"VOICE_LONG\" INTEGER," + // 16: voiceLong
                "\"IMAGE_SIZE\" TEXT," + // 17: imageSize
                "\"MSG_DESCRIPTION\" TEXT," + // 18: msgDescription
                "\"ORIGINAL_OBJ_ID\" TEXT," + // 19: originalObjID
                "\"TEMP_STR\" TEXT," + // 20: tempStr
                "\"MEDIUM_OBJ_ID\" TEXT," + // 21: mediumObjID
                "\"THUMBNAIL_OBJ_ID\" TEXT," + // 22: thumbnailObjID
                "\"HD_KEY\" TEXT," + // 23: hdKey
                "\"RESPONSE\" TEXT," + // 24: response
                "\"PRIVATE_TO_NICKNAME\" TEXT," + // 25: privateToNickname
                "\"IS_PRIVATE_MESSAGE\" INTEGER," + // 26: isPrivateMessage
                "\"PRIVATE_MSG_FROM_ID\" TEXT," + // 27: privateMsgFromID
                "\"EXTRA_UID\" TEXT," + // 28: extraUid
                "\"IS_PRIVATE_MSG_FROM_ME\" INTEGER," + // 29: isPrivateMsgFromMe
                "\"SEND_MSG_TYPE\" INTEGER," + // 30: sendMsgType
                "\"IS_CHOICE_TRANSLATE\" INTEGER," + // 31: isChoiceTranslate
                "\"TRANSLATION_STATUS\" INTEGER," + // 32: translationStatus
                "\"TRANSLATE_TYPE\" INTEGER," + // 33: translateType
                "\"MSG_STATUS\" INTEGER," + // 34: msgStatus
                "\"MSG_IS_TRANS\" INTEGER," + // 35: msgIsTrans
                "\"IS_RE_TRANS\" INTEGER," + // 36: isReTrans
                "\"IS_READ_VOICE\" INTEGER," + // 37: isReadVoice
                "\"TYPE\" INTEGER," + // 38: type
                "\"TRANSLATE_TIME\" INTEGER," + // 39: translateTime
                "\"EXTRA_INFO\" TEXT," + // 40: extraInfo
                "\"ORDER_ID\" TEXT);"); // 41: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String translateContent = entity.getTranslateContent();
        if (translateContent != null) {
            stmt.bindString(4, translateContent);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(5, fromName);
        }
        stmt.bindString(6, entity.getFromId());
 
        String msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindString(7, msgTime);
        }
        stmt.bindString(8, entity.getToId());
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(9, toName);
        }
        stmt.bindString(10, entity.getTranslatorId());
 
        String translateFileUrl = entity.getTranslateFileUrl();
        if (translateFileUrl != null) {
            stmt.bindString(11, translateFileUrl);
        }
 
        String translateFilePath = entity.getTranslateFilePath();
        if (translateFilePath != null) {
            stmt.bindString(12, translateFilePath);
        }
 
        Integer translateVoiceLong = entity.getTranslateVoiceLong();
        if (translateVoiceLong != null) {
            stmt.bindLong(13, translateVoiceLong);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(14, fileUrl);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(15, filePath);
        }
 
        String videoThumbnailPath = entity.getVideoThumbnailPath();
        if (videoThumbnailPath != null) {
            stmt.bindString(16, videoThumbnailPath);
        }
 
        Integer voiceLong = entity.getVoiceLong();
        if (voiceLong != null) {
            stmt.bindLong(17, voiceLong);
        }
 
        String imageSize = entity.getImageSize();
        if (imageSize != null) {
            stmt.bindString(18, imageSize);
        }
 
        String msgDescription = entity.getMsgDescription();
        if (msgDescription != null) {
            stmt.bindString(19, msgDescription);
        }
 
        String originalObjID = entity.getOriginalObjID();
        if (originalObjID != null) {
            stmt.bindString(20, originalObjID);
        }
 
        String tempStr = entity.getTempStr();
        if (tempStr != null) {
            stmt.bindString(21, tempStr);
        }
 
        String mediumObjID = entity.getMediumObjID();
        if (mediumObjID != null) {
            stmt.bindString(22, mediumObjID);
        }
 
        String thumbnailObjID = entity.getThumbnailObjID();
        if (thumbnailObjID != null) {
            stmt.bindString(23, thumbnailObjID);
        }
 
        String hdKey = entity.getHdKey();
        if (hdKey != null) {
            stmt.bindString(24, hdKey);
        }
 
        String response = entity.getResponse();
        if (response != null) {
            stmt.bindString(25, response);
        }
 
        String privateToNickname = entity.getPrivateToNickname();
        if (privateToNickname != null) {
            stmt.bindString(26, privateToNickname);
        }
 
        Boolean isPrivateMessage = entity.getIsPrivateMessage();
        if (isPrivateMessage != null) {
            stmt.bindLong(27, isPrivateMessage ? 1L: 0L);
        }
 
        String privateMsgFromID = entity.getPrivateMsgFromID();
        if (privateMsgFromID != null) {
            stmt.bindString(28, privateMsgFromID);
        }
 
        String extraUid = entity.getExtraUid();
        if (extraUid != null) {
            stmt.bindString(29, extraUid);
        }
 
        Boolean isPrivateMsgFromMe = entity.getIsPrivateMsgFromMe();
        if (isPrivateMsgFromMe != null) {
            stmt.bindLong(30, isPrivateMsgFromMe ? 1L: 0L);
        }
 
        Integer sendMsgType = entity.getSendMsgType();
        if (sendMsgType != null) {
            stmt.bindLong(31, sendMsgType);
        }
 
        Boolean isChoiceTranslate = entity.getIsChoiceTranslate();
        if (isChoiceTranslate != null) {
            stmt.bindLong(32, isChoiceTranslate ? 1L: 0L);
        }
 
        Integer translationStatus = entity.getTranslationStatus();
        if (translationStatus != null) {
            stmt.bindLong(33, translationStatus);
        }
 
        Integer translateType = entity.getTranslateType();
        if (translateType != null) {
            stmt.bindLong(34, translateType);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(35, msgStatus);
        }
 
        Boolean msgIsTrans = entity.getMsgIsTrans();
        if (msgIsTrans != null) {
            stmt.bindLong(36, msgIsTrans ? 1L: 0L);
        }
 
        Boolean isReTrans = entity.getIsReTrans();
        if (isReTrans != null) {
            stmt.bindLong(37, isReTrans ? 1L: 0L);
        }
 
        Boolean isReadVoice = entity.getIsReadVoice();
        if (isReadVoice != null) {
            stmt.bindLong(38, isReadVoice ? 1L: 0L);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(39, type);
        }
 
        Long translateTime = entity.getTranslateTime();
        if (translateTime != null) {
            stmt.bindLong(40, translateTime);
        }
 
        String extraInfo = entity.getExtraInfo();
        if (extraInfo != null) {
            stmt.bindString(41, extraInfo);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(42, orderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String translateContent = entity.getTranslateContent();
        if (translateContent != null) {
            stmt.bindString(4, translateContent);
        }
 
        String fromName = entity.getFromName();
        if (fromName != null) {
            stmt.bindString(5, fromName);
        }
        stmt.bindString(6, entity.getFromId());
 
        String msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindString(7, msgTime);
        }
        stmt.bindString(8, entity.getToId());
 
        String toName = entity.getToName();
        if (toName != null) {
            stmt.bindString(9, toName);
        }
        stmt.bindString(10, entity.getTranslatorId());
 
        String translateFileUrl = entity.getTranslateFileUrl();
        if (translateFileUrl != null) {
            stmt.bindString(11, translateFileUrl);
        }
 
        String translateFilePath = entity.getTranslateFilePath();
        if (translateFilePath != null) {
            stmt.bindString(12, translateFilePath);
        }
 
        Integer translateVoiceLong = entity.getTranslateVoiceLong();
        if (translateVoiceLong != null) {
            stmt.bindLong(13, translateVoiceLong);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(14, fileUrl);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(15, filePath);
        }
 
        String videoThumbnailPath = entity.getVideoThumbnailPath();
        if (videoThumbnailPath != null) {
            stmt.bindString(16, videoThumbnailPath);
        }
 
        Integer voiceLong = entity.getVoiceLong();
        if (voiceLong != null) {
            stmt.bindLong(17, voiceLong);
        }
 
        String imageSize = entity.getImageSize();
        if (imageSize != null) {
            stmt.bindString(18, imageSize);
        }
 
        String msgDescription = entity.getMsgDescription();
        if (msgDescription != null) {
            stmt.bindString(19, msgDescription);
        }
 
        String originalObjID = entity.getOriginalObjID();
        if (originalObjID != null) {
            stmt.bindString(20, originalObjID);
        }
 
        String tempStr = entity.getTempStr();
        if (tempStr != null) {
            stmt.bindString(21, tempStr);
        }
 
        String mediumObjID = entity.getMediumObjID();
        if (mediumObjID != null) {
            stmt.bindString(22, mediumObjID);
        }
 
        String thumbnailObjID = entity.getThumbnailObjID();
        if (thumbnailObjID != null) {
            stmt.bindString(23, thumbnailObjID);
        }
 
        String hdKey = entity.getHdKey();
        if (hdKey != null) {
            stmt.bindString(24, hdKey);
        }
 
        String response = entity.getResponse();
        if (response != null) {
            stmt.bindString(25, response);
        }
 
        String privateToNickname = entity.getPrivateToNickname();
        if (privateToNickname != null) {
            stmt.bindString(26, privateToNickname);
        }
 
        Boolean isPrivateMessage = entity.getIsPrivateMessage();
        if (isPrivateMessage != null) {
            stmt.bindLong(27, isPrivateMessage ? 1L: 0L);
        }
 
        String privateMsgFromID = entity.getPrivateMsgFromID();
        if (privateMsgFromID != null) {
            stmt.bindString(28, privateMsgFromID);
        }
 
        String extraUid = entity.getExtraUid();
        if (extraUid != null) {
            stmt.bindString(29, extraUid);
        }
 
        Boolean isPrivateMsgFromMe = entity.getIsPrivateMsgFromMe();
        if (isPrivateMsgFromMe != null) {
            stmt.bindLong(30, isPrivateMsgFromMe ? 1L: 0L);
        }
 
        Integer sendMsgType = entity.getSendMsgType();
        if (sendMsgType != null) {
            stmt.bindLong(31, sendMsgType);
        }
 
        Boolean isChoiceTranslate = entity.getIsChoiceTranslate();
        if (isChoiceTranslate != null) {
            stmt.bindLong(32, isChoiceTranslate ? 1L: 0L);
        }
 
        Integer translationStatus = entity.getTranslationStatus();
        if (translationStatus != null) {
            stmt.bindLong(33, translationStatus);
        }
 
        Integer translateType = entity.getTranslateType();
        if (translateType != null) {
            stmt.bindLong(34, translateType);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(35, msgStatus);
        }
 
        Boolean msgIsTrans = entity.getMsgIsTrans();
        if (msgIsTrans != null) {
            stmt.bindLong(36, msgIsTrans ? 1L: 0L);
        }
 
        Boolean isReTrans = entity.getIsReTrans();
        if (isReTrans != null) {
            stmt.bindLong(37, isReTrans ? 1L: 0L);
        }
 
        Boolean isReadVoice = entity.getIsReadVoice();
        if (isReadVoice != null) {
            stmt.bindLong(38, isReadVoice ? 1L: 0L);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(39, type);
        }
 
        Long translateTime = entity.getTranslateTime();
        if (translateTime != null) {
            stmt.bindLong(40, translateTime);
        }
 
        String extraInfo = entity.getExtraInfo();
        if (extraInfo != null) {
            stmt.bindString(41, extraInfo);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(42, orderId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageBean readEntity(Cursor cursor, int offset) {
        ChatMessageBean entity = new ChatMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // msgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // translateContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromName
            cursor.getString(offset + 5), // fromId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // msgTime
            cursor.getString(offset + 7), // toId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // toName
            cursor.getString(offset + 9), // translatorId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // translateFileUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // translateFilePath
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // translateVoiceLong
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fileUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // filePath
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // videoThumbnailPath
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // voiceLong
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // imageSize
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // msgDescription
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // originalObjID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tempStr
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // mediumObjID
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // thumbnailObjID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // hdKey
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // response
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // privateToNickname
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // isPrivateMessage
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // privateMsgFromID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // extraUid
            cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0, // isPrivateMsgFromMe
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // sendMsgType
            cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0, // isChoiceTranslate
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // translationStatus
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // translateType
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // msgStatus
            cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0, // msgIsTrans
            cursor.isNull(offset + 36) ? null : cursor.getShort(offset + 36) != 0, // isReTrans
            cursor.isNull(offset + 37) ? null : cursor.getShort(offset + 37) != 0, // isReadVoice
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // type
            cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39), // translateTime
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // extraInfo
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41) // orderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTranslateContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromId(cursor.getString(offset + 5));
        entity.setMsgTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToId(cursor.getString(offset + 7));
        entity.setToName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTranslatorId(cursor.getString(offset + 9));
        entity.setTranslateFileUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTranslateFilePath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTranslateVoiceLong(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setFileUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFilePath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVideoThumbnailPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVoiceLong(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setImageSize(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMsgDescription(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOriginalObjID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTempStr(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMediumObjID(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setThumbnailObjID(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setHdKey(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setResponse(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPrivateToNickname(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsPrivateMessage(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setPrivateMsgFromID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setExtraUid(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsPrivateMsgFromMe(cursor.isNull(offset + 29) ? null : cursor.getShort(offset + 29) != 0);
        entity.setSendMsgType(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setIsChoiceTranslate(cursor.isNull(offset + 31) ? null : cursor.getShort(offset + 31) != 0);
        entity.setTranslationStatus(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setTranslateType(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setMsgStatus(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setMsgIsTrans(cursor.isNull(offset + 35) ? null : cursor.getShort(offset + 35) != 0);
        entity.setIsReTrans(cursor.isNull(offset + 36) ? null : cursor.getShort(offset + 36) != 0);
        entity.setIsReadVoice(cursor.isNull(offset + 37) ? null : cursor.getShort(offset + 37) != 0);
        entity.setType(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setTranslateTime(cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39));
        entity.setExtraInfo(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setOrderId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
