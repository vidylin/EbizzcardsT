package greendao.autogen.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gzligo.ebizzcardstranslator.persistence.NewTravelTransOrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_TRAVEL_TRANS_ORDER_BEAN".
*/
public class NewTravelTransOrderBeanDao extends AbstractDao<NewTravelTransOrderBean, Long> {

    public static final String TABLENAME = "NEW_TRAVEL_TRANS_ORDER_BEAN";

    /**
     * Properties of entity NewTravelTransOrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Session_id = new Property(1, String.class, "session_id", false, "SESSION_ID");
        public final static Property FromUserId = new Property(2, String.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Portrait = new Property(4, String.class, "portrait", false, "PORTRAIT");
        public final static Property LanguageFromId = new Property(5, Integer.class, "languageFromId", false, "LANGUAGE_FROM_ID");
        public final static Property LanguageToId = new Property(6, Integer.class, "languageToId", false, "LANGUAGE_TO_ID");
        public final static Property TransType = new Property(7, Integer.class, "transType", false, "TRANS_TYPE");
        public final static Property Duration = new Property(8, Integer.class, "duration", false, "DURATION");
        public final static Property StartTime = new Property(9, Long.class, "startTime", false, "START_TIME");
        public final static Property Desc = new Property(10, String.class, "desc", false, "DESC");
        public final static Property EffectTime = new Property(11, Long.class, "effectTime", false, "EFFECT_TIME");
    }


    public NewTravelTransOrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewTravelTransOrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_TRAVEL_TRANS_ORDER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_ID\" TEXT NOT NULL ," + // 1: session_id
                "\"FROM_USER_ID\" TEXT," + // 2: fromUserId
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"PORTRAIT\" TEXT," + // 4: portrait
                "\"LANGUAGE_FROM_ID\" INTEGER," + // 5: languageFromId
                "\"LANGUAGE_TO_ID\" INTEGER," + // 6: languageToId
                "\"TRANS_TYPE\" INTEGER," + // 7: transType
                "\"DURATION\" INTEGER," + // 8: duration
                "\"START_TIME\" INTEGER," + // 9: startTime
                "\"DESC\" TEXT," + // 10: desc
                "\"EFFECT_TIME\" INTEGER);"); // 11: effectTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_TRAVEL_TRANS_ORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewTravelTransOrderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_id());
 
        String fromUserId = entity.getFromUserId();
        if (fromUserId != null) {
            stmt.bindString(3, fromUserId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
 
        Integer languageFromId = entity.getLanguageFromId();
        if (languageFromId != null) {
            stmt.bindLong(6, languageFromId);
        }
 
        Integer languageToId = entity.getLanguageToId();
        if (languageToId != null) {
            stmt.bindLong(7, languageToId);
        }
 
        Integer transType = entity.getTransType();
        if (transType != null) {
            stmt.bindLong(8, transType);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(9, duration);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(10, startTime);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(11, desc);
        }
 
        Long effectTime = entity.getEffectTime();
        if (effectTime != null) {
            stmt.bindLong(12, effectTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewTravelTransOrderBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_id());
 
        String fromUserId = entity.getFromUserId();
        if (fromUserId != null) {
            stmt.bindString(3, fromUserId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(5, portrait);
        }
 
        Integer languageFromId = entity.getLanguageFromId();
        if (languageFromId != null) {
            stmt.bindLong(6, languageFromId);
        }
 
        Integer languageToId = entity.getLanguageToId();
        if (languageToId != null) {
            stmt.bindLong(7, languageToId);
        }
 
        Integer transType = entity.getTransType();
        if (transType != null) {
            stmt.bindLong(8, transType);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(9, duration);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(10, startTime);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(11, desc);
        }
 
        Long effectTime = entity.getEffectTime();
        if (effectTime != null) {
            stmt.bindLong(12, effectTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewTravelTransOrderBean readEntity(Cursor cursor, int offset) {
        NewTravelTransOrderBean entity = new NewTravelTransOrderBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // session_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // portrait
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // languageFromId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // languageToId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // transType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // startTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // desc
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // effectTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewTravelTransOrderBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSession_id(cursor.getString(offset + 1));
        entity.setFromUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPortrait(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLanguageFromId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLanguageToId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTransType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDuration(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStartTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDesc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEffectTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewTravelTransOrderBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewTravelTransOrderBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewTravelTransOrderBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
